{ "type": "Basic"
  , "title": "Language Features"
  , "description": ""
  , "statements":
    [
    ]
  , "unsorted":
    [ { "key": "01", "title": "The ability to restrict types and functions based on values."
      , "description":
        [ "Known as dependent types, this language feature that allows types to depend on the value of one or more expression"
        , "In the example below, the factorial function is defined as taking an integer. A factorial can traditionally only be computed for a natural number; negative numbers are not valid. In languages without dependent types we could check if x was negative and return 0 for that case, but the snippet below demonstrates how a similar result can be achieved with dependent typing."
        , "A restriction is placed on the int type that guarantees the argument will be greater than or equal to 0. The distinction from checking the value of x in the function body is that the check has gone from being a runtime-check to a compile-time check, making it a compiler error to call factorial with a negative number."
        ]
      , "image": "images/dependent-types.png"
      , "rating": "Neutral" 
      }
    , { "key": "02", "title": ""
      , "description":
        [ ""
        ]
      , "image": null
      , "rating": "Neutral" 
      }
    , { "key": "03", "title": ""
      , "description":
        [ ""
        ]
      , "image": null
      , "rating": "Neutral" 
      }
    , { "key": "04", "title": ""
      , "description":
        [ ""
        ]
      , "image": null
      , "rating": "Neutral" 
      }
    , { "key": "05", "title": ""
      , "description":
        [ ""
        ]
      , "image": null
      , "rating": "Neutral" 
      }
    , { "key": "06", "title": ""
      , "description":
        [ ""
        ]
      , "image": null
      , "rating": "Neutral" 
      }
    , { "key": "07", "title": ""
      , "description":
        [ ""
        ]
      , "image": null
      , "rating": "Neutral" 
      }
    ]
  }