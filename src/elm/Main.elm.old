port module Main exposing
  ( main
  )

-- Imports ---------------------------------------------------------------------
import Browser
import Browser.Navigation
import Data.Likert exposing (LikertScale)
import Data.QSort exposing (QSort)
import Html as H exposing (Html)
import Html.Attributes as A
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode
import Set
import Tuple.Extra as Tuple exposing (Tuple)
import Url exposing (Url)

-- Ports -----------------------------------------------------------------------
port toLocalStorage : Encode.Value -> Cmd msg

-- Main ------------------------------------------------------------------------
main : Program Decode.Value (Page, Browser.Navigation.Key, Model) Msg
main =
  Browser.application
    { init = init
    , update = update
    , view = \model -> { title = "", body = [ view model ] }
    , subscriptions = subscriptions
    , onUrlRequest = LinkClicked
    , onUrlChange = UrlChanged
    }

-- Model -----------------------------------------------------------------------
type alias Flags =
  { likert : List LikertScale
  , qsort : QSort
  }

flagsDecoder : Decoder Flags
flagsDecoder =
  Decode.map2 Flags
    (Decode.field "likert" <| Decode.list Data.Likert.decoder)
    (Decode.field "qsort" Data.QSort.decoder)

type alias Model =
  { likert : List LikertScale
  , qsort : QSort
  , url : Url
  }

type Page
  = Info
  | Demographics
  | LikertExercise
  | QSortExercise
  | Submit

encodeModel : Model -> Encode.Value
encodeModel { likert, qsort } =
  Encode.object
    [ ("likert", Encode.list Data.Likert.encode likert)
    , ("qsort", Data.QSort.encode qsort)
    ]

initialModel : Decode.Value -> Url -> Model
initialModel flags url =
  case Decode.decodeValue flagsDecoder flags of
    Ok { likert, qsort } ->
      { likert = likert
      , qsort = qsort
      , url = url
      }

    Err _ ->
      { likert = []
      , qsort = Data.QSort.init "" "" (Set.fromList [])
      , url = url
      }

init : Decode.Value -> Url -> Browser.Navigation.Key -> Tuple (Page, Browser.Navigation.Key, Model) (Cmd Msg)
init flags url key =
  Tuple.pairWith Cmd.none <|
    ( Info
    , key
    , initialModel flags url
    )  

-- Update ----------------------------------------------------------------------
type Msg
  = ItemChecked Int String Data.Likert.Rating
  | ItemSelected Data.QSort.Statement
  | ItemRated Data.QSort.Rating
  | ItemSorted Int
  | StepForward
  | StepBackward
  | LinkClicked Browser.UrlRequest
  | UrlChanged 

update : Msg -> (Page, Browser.Navigation.Key, Model) -> Tuple (Page, Browser.Navigation.Key, Model) (Cmd Msg)
update msg (page, key, model) =
  case msg of
    ItemChecked i statement rating ->
      Result.map (updateLikert (Data.Likert.rate statement rating) i) model
        |> Tuple.from
        |> Tuple.mapSecond (Result.map (encodeModel >> toLocalStorage) >> Result.withDefault Cmd.none)

    ItemSelected item ->
      Result.map (updateQSort (Data.QSort.select item)) model
        |> Tuple.from
        |> Tuple.mapSecond (Result.map (encodeModel >> toLocalStorage) >> Result.withDefault Cmd.none)

    ItemRated rating ->
      Result.map (updateQSort (Data.QSort.rate rating)) model
        |> Tuple.from
        |> Tuple.mapSecond (Result.map (encodeModel >> toLocalStorage) >> Result.withDefault Cmd.none)

    ItemSorted position ->
      Result.map (updateQSort (Data.QSort.sort position)) model
        |> Tuple.from
        |> Tuple.mapSecond (Result.map (encodeModel >> toLocalStorage) >> Result.withDefault Cmd.none)

    StepForward ->
      Result.map (updateQSort Data.QSort.stepForward) model
        |> Tuple.from
        |> Tuple.mapSecond (Result.map (encodeModel >> toLocalStorage) >> Result.withDefault Cmd.none)

    StepBackward ->
      Result.map (updateQSort Data.QSort.stepBackward) model
        |> Tuple.from
        |> Tuple.mapSecond (Result.map (encodeModel >> toLocalStorage) >> Result.withDefault Cmd.none)

updateLikert : (LikertScale -> LikertScale) -> Int -> Model -> Model
updateLikert updateF pos model =
  model.likert 
    |> List.indexedMap (\i scale -> if i == pos then updateF scale else scale)
    |> (\likert -> { model | likert = likert })

updateQSort : (QSort -> QSort) -> Model -> Model
updateQSort updateF model =
  updateF model.qsort
    |> (\qsort -> { model | qsort = qsort })

-- View ------------------------------------------------------------------------
view : (Page, Browser.Navigation.Key, Model) -> Html Msg
view (page, key, model) =
  case page of
    Info ->
      H.main_ []
        [
        ]

    Demographics ->
      H.main_ []
        [
        ]

    LikertExercise ->
      H.main_ []
        ( model.likert |> List.indexedMap (\i scale ->
            Data.Likert.toHtml (ItemChecked i) scale
        ))

    QSortExercise ->
      H.main_ []
        [ model.qsort |> Data.QSort.toHtml
            { selectMsg = ItemSelected
            , rateMsg = ItemRated
            , sortMsg = ItemSorted
            , stepForward = StepForward
            , stepBackward = StepBackward
            }
        ]

    Submit ->
      H.main_ []
        [
        ]

-- Subscriptions ---------------------------------------------------------------
subscriptions : (Page, Browser.Navigation.Key, Model) -> Sub Msg
subscriptions _ =
  Sub.batch
    [
    ]