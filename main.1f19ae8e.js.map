{"version":3,"sources":["main.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["demographics","type","question","response","options","text","likert","title","description","statements","statement","ratings","qsort","unsorted","key","image","rating","Elm","Main","init","flags","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["import { Elm } from './elm/Main.elm'\n\n// t test non parametric\n\nconst demographics = [\n  {\n    type: 'SingleResponse',\n    question: 'How old are you?',\n    response: null,\n    options: [\n      { type: 'Fixed', text: 'Under 18' },\n      { type: 'Fixed', text: '18-24 years old' },\n      { type: 'Fixed', text: '25-34 years old' },\n      { type: 'Fixed', text: '35-44 years old' },\n      { type: 'Fixed', text: '45-54 years old' },\n      { type: 'Fixed', text: 'Over 55' }\n    ]\n  },\n  {\n    type: 'SingleResponseWithOther',\n    question: 'What is your highest level of education achieved?',\n    response: null,\n    options: [\n      { type: 'Fixed', text: 'Less than A-levels (UK) or a high school diploma (US)' },\n      { type: 'Fixed', text: 'A-levels (URK), high school diploma (US), or equivalent' },\n      { type: 'Fixed', text: 'Bachelor\\'s Degree' },\n      { type: 'Fixed', text: 'Master\\'s Degree' },\n      { type: 'Fixed', text: 'Doctorate' }\n    ]\n  },\n  {\n    type: 'SingleResponseWithOther',\n    question: 'What was your primary field of study?',\n    response: null,\n    options: [\n      { type: 'Fixed', text: 'Computer Science, Software Engineering, or related fields' },\n      { type: 'Fixed', text: 'Music, Music Technology, or related fields' }\n    ]\n  },\n  {\n    type: 'MultipleResponseWithOther',\n    question: 'Which of the following languages or frameworks have you used for creating interactive audio applications?',\n    response: [],\n    options: [\n      { type: 'Fixed', text: 'AudioKit [Swift]' },\n      { type: 'Fixed', text: 'Csound' },\n      { type: 'Fixed', text: 'FAUST' },\n      { type: 'Fixed', text: 'JUCE [C++]' },\n      { type: 'Fixed', text: 'Max/MSP' },\n      { type: 'Fixed', text: 'Processing' },\n      { type: 'Fixed', text: 'Pure Data' },\n      { type: 'Fixed', text: 'Reaktor' },\n      { type: 'Fixed', text: 'SuperCollider' },\n      { type: 'Fixed', text: 'Web Audio API [JavaScript]' }\n    ]\n  },\n  {\n    type: 'SingleResponseWithOther',\n    question: 'Which of the following languages or frameworks are you most comfortable using to create interactive audio applications?',\n    response: null,\n    options: [\n      { type: 'Fixed', text: 'AudioKit [Swift]' },\n      { type: 'Fixed', text: 'Csound' },\n      { type: 'Fixed', text: 'FAUST' },\n      { type: 'Fixed', text: 'JUCE [C++]' },\n      { type: 'Fixed', text: 'Max/MSP' },\n      { type: 'Fixed', text: 'Processing' },\n      { type: 'Fixed', text: 'Pure Data' },\n      { type: 'Fixed', text: 'Reaktor' },\n      { type: 'Fixed', text: 'SuperCollider' },\n      { type: 'Fixed', text: 'Web Audio API [JavaScript]' }\n    ]\n  }\n]\n\nconst likert = [\n  {\n    title: 'How well defined is the end goal?',\n    description: 'Some programmers have a very clear idea of what the finished piece of software should look like and what it should do. Others take a more exploratory approach. The following statements are about how clearly defined the end-goal of a project is before you start programming.',\n    statements: [\n      { statement: 'Before starting to program I have a clear idea what the program will look like.' },\n      { statement: 'Before starting to program I have a clear idea how the program will work.' },\n      { statement: 'Before starting to program I have a clear idea how to organise my code.' },\n      { statement: 'Before starting to program I write down what I need to do.' },\n      { statement: 'Before starting to program I sketch or wireframe how the program will look.' }\n    ],\n    ratings: [\n      'Strongly Disagree',\n      'Disagree',\n      'Neutral',\n      'Agree',\n      'Strongly Agree'\n    ]\n  },\n  {\n    title: 'How much time do you spend on, and how big is, the finished project?',\n    description: 'Some programmers work on projects for many months or even years. Others prefer to work on a project for just a matter of days or hours. The following statements are about how long a typical project takes before you consider it complete, and how large the codebase is when it is finished.',\n    statements: [\n      { statement: 'A typical project takes a significant amount of time to complete.' },\n      { statement: 'A finished project’s codebase tends to span multiple files with many lines of code.' },\n      { statement: 'I tend to considered a project finished after one programming session.' },\n      { statement: 'A finished project’s codebase tends to be made up of one or two files.' }\n    ],\n    ratings: [\n      'Strongly Disagree',\n      'Disagree',\n      'Neutral',\n      'Agree',\n      'Strongly Agree'\n    ]\n  },\n  {\n    title: 'How much did the project change from beginning to end?',\n    description: '',\n    statements: [\n      { statement: 'A project is only finished when all my tests pass.' },\n      { statement: 'Non-critical bugs can lead to unexpected behaviour that makes the project betteror more interesting.' },\n      { statement: 'The primary method of interaction has often changed by the time a project is finished.' },\n      { statement: 'The primary audio output has often changed by the time a project is finished.' }\n    ],\n    ratings: [\n      'Strongly Disagree',\n      'Disagree',\n      'Neutral',\n      'Agree',\n      'Strongly Agree'\n    ]\n  }\n]\n\nconst qsort = {\n  type: 'Basic',\n  title: 'Programming Language Features',\n  description: `In the two-part task below you'll need to rate various programming\n  language features according to positively or negatively they impact your\n  programming practice. In the second portion of the task you'll then be asked to\n  order the statements from \"Most negatively impactful\" through \"Not impactful\" to\n  \"Most positively impactful\". Each language feature has a brief description and\n  sometimes an example image or code snippet. If you're unsure how to rate a feature\n  rate it as Neutral.`,\n  statements: [],\n  unsorted: [\n    {\n      key: '01',\n      title: 'The ability to restrict or constrain function arguments',\n      image: 'images/01-dependent-types.png',\n      rating: 'Neutral',\n      description: [\n        `Known as \"dependent typing\", this type system allows a type's definition\n        to depend on a value.`,\n        `In the example above, the factorial function is defined. It takes one\n        argument, an integer, but has an additional constraint applied to it. The\n        factorial function can only be called with natural numbers: numbers\n        greater than zero.`,\n        `Attempting to call factorial(-1) would result in a compile-time error\n        meaning less run-time code is dedicated to input validation.`\n      ]\n    },\n    {\n      key: '02',\n      title: 'Objects with the same members or structure may be used interchangeably',\n      image: 'images/02-structural-typing.png',\n      rating: 'Neutral',\n      description: [\n        `Known as \"structural typing\", this system allows objects to be considered\n        equal if they share the same members.`,\n        `In the code snippet, values of both the Person and Employee types\n        can be passed to the greet function as they both have a \"name\" field.`\n      ]\n    },\n    {\n      key: '03',\n      title: 'The language has tagged union types to describe variants of a single type',\n      image: 'images/03-sum-types.png',\n      rating: 'Neutral',\n      description: [\n        `Tagged unions, also known as \"disjoint unions\" are used to describe\n        a value that can take several different, but fixed, types. A special tag\n        is used to explicitly indicate which variant a value currently is.`,\n        `A traditional enum could be considered the most basic example of a tagged\n        union. Each member of the enum is a distinct tag such as Red, Orange, and\n        Green in the example above.`,\n        `Each variant in the union can also store differing pieces data, as is the\n        case in the AudioNode example. The Oscillator variant holds Float values\n        for frequency and phase, while the Gain variant holds a single Float value\n        for amount.`,\n        `Finally, tagged unions can be parameterised for generic use of the type.\n        The Result type defined above has two variants, Success and Error, and two\n        type parameters, e and a. Depending on the needs of the programmer, types\n        such as \"Result String Int\" can now be used to indicate a value that may\n        be an error string or an integer.`\n      ]\n    },\n    {\n      key: '04',\n      title: 'The language has untagged union types to unify several existing types',\n      image: 'images/04-union-types.png',\n      rating: 'Neutral',\n      description: [\n        `Similar to disjoint unions, untagged unions describe a value that can be\n        one of sevaral types. As the name implies, untagged unions do not \"tag\"\n        each variant.`,\n        `Untagged unions are used to say a value could be of type a OR type b, as\n        in the example above. The C code above defines a union of an int and a\n        float, and provides a mechanism to access either value. A similar thing\n        can be acheived in typescript, for example: \"type foo = number | string\".`\n      ]\n    },\n    {\n      key: '05',\n      title: 'Types are dynamic and determined at run-time',\n      image: 'images/05-dynamic-typing.png',\n      rating: 'Neutral',\n      description: [\n        `In dynamically typed languages, types are fluid and determined while the\n        program is running.`,\n        `This makes it easy for developers to maniupulate and transform values,\n        but comes at the cost of having to check types manually at runtime.`,\n        `The snippet shows how to check the type of a variable in javascript,\n        and shows that the type of a variable can change over it's lifetime.`\n      ]\n    },\n    {\n      key: '06',\n      title: 'The language has a static type system that determines type correctness at compile-time',\n      image: 'images/06-static-typing.png',\n      rating: 'Neutral',\n      description: [\n        `In statically typed languages, the type of a value is determined at compile\n        time and the compiler performs checks to ensure all the types in a program\n        match up.`,\n        `Attempting to call a function that only takes integers with a string for\n        example, will result in a compile time error forcing the developer to fix\n        the problem.`,\n        `Some languages require all values and functions to have \"type annotations\"\n        whereas others can infer types based on their useage while still enforcing\n        correctness.`\n      ]\n    },\n    {\n      key: '07',\n      title: 'The language has an undefined and/or null type and value',\n      image: 'images/07-undefined-and-null.png',\n      rating: 'Neutral',\n      description: [\n        `Some languages have the notion of \"undefined\" or \"null\" (or both) to\n        describe values that do not exist.`,\n        `In javascript undefined is returned when trying to access object properties\n        that do not exist, and null is used to explicitly describe something with\n        no value.`,\n        `In the snippet, the greet function checks if the object has the\n        property \"name\" and uses that in the greeting if it exists. If no element\n        has the id \"superCoolElement\", then null is returned and so this should\n        be checked before trying to do anything with the \"el\" variable.`\n      ]\n    },\n    {\n      key: '08',\n      title: 'Run-time errors are encoded at the type level and handled as normal values',\n      image: 'images/08-error-types.png',\n      rating: 'Neutral',\n      description: [\n        `In some languages such as Java, errors are represented as \"exceptions\"\n        that are thrown and must be caught to prevent the program from crashing.\n        In other languages however, errors are represented as values like any\n        other and can be manipulated and passed around as normal.`,\n        `The Result type above demonstrates this. Instead of throwing an exception,\n        the Result type describes a computation that might fail, and forces the\n        developer to handle both cases whenever validating a month number.`\n      ]\n    },\n    {\n      key: '09',\n      title: 'The language supports code macros',\n      image: 'images/09-macros.png',\n      rating: 'Neutral',\n      description: [\n        `Some languages support macros as a means of generating or inserting\n        bits of code into an existing piece of code. The code snippet is\n        an example of a macro in C. When the compiler comes across any instances\n        of the word \"double\", it expands and inserts the macro into the source\n        code and then compiles that new piece of code instead.`,\n        `Lisp takes this concept even further, allowing lisp programs themselves\n        to manipulate macros, and so functions can be written to generate macros\n        at run-time.`\n      ]\n    },\n    {\n      key: '10',\n      title: 'The language supports reflection and/or introspection',\n      image: 'images/10-reflection-and-introspection.png',\n      rating: 'Neutral',\n      description: [\n        `Languages that support reflection and/or introspection are capable of\n        examining a program at run-time. In doing so, these programs are able to\n        modify their own structure or behaviour, defining new types and inspecting\n        the type or properties of values at run-time.`,\n        `The above Java snippet gets all the methods defined in MyClass, and\n        prints their names to the console. Reflection is particularly useful for\n        serialising objects into a format such as JSON.`\n      ]\n    },\n    {\n      key: '11',\n      title: `The language has a comprehensive standard library covering areas such as \n      UI, graphics, networking, and more complex audio constructs`,\n      image: '',\n      rating: 'Neutral',\n      description: [\n        `The language provides packages or modules for a wide variety of programming\n        tasks as part of it's standard library.`,\n        `These could include packages for creating and displaying user interfaces,\n        handling network requests, drawing graphics to the screen, or higher-level\n        audio elements such as complete synthesisers.`\n      ]\n    },\n    {\n      key: '12',\n      title: 'Public packages must following the Semantic Versioning standard',\n      image: 'images/12-semantic-versioning.png',\n      rating: 'Neutral',\n      description: [\n        `Some languages have tighter control on their package ecosystem. Elm uses\n        it's type system to analyse updates to packages and automatically works\n        out how to bump the package version.`,\n        `Semantic Versioning is a versioning standard that splits splits software\n        versions into MAJOR.MINOR.PATCH numbers such as 1.1.0. This serves as a\n        \"contract\" to consumers of a package, meaning that changes to a package's\n        API must result in a MAJOR version increase.`\n      ]\n    },\n    {\n      key: '13',\n      title: 'The ability to evaluate strings as source code at run-time',\n      image: 'images/13-eval.png',\n      rating: 'Neutral',\n      description: [\n        // `In many interpretted languages (and some compiled ones), developers are\n        // given the ability to evaluate a string as though it were source code.`,\n        // `This can be useful for allowing user input to be run and executed as code\n        // or for code to be easily be dynamically generated and evaluated at run-time.`,\n        // `The code snippet shows the eval function in JavaScript. First, eval is\n        // called to evluate the result of 2 * 20, and that result can be stored in\n        // the x variable like normal. Notice how the second use of eval is able to\n        // use existing variables, here x is being converted to a string and assigned\n        // to y.`\n      ]\n    },\n    {\n      key: '14',\n      title: 'Code testing is built into the language',\n      image: 'images/14-first-class-tests.png',\n      rating: 'Neutral',\n      description: [\n        `Testing code can be an important part of some developers workflow. It\n        commonly involves testing a particular function or piece of code against\n        a variety of different inputs and making sure the output is what was\n        expected.`,\n        `Various testing frameworks existing for many programming languages, but\n        some offer specific constructs for testing as part of the language itself.`,\n        `The code snippet is from the Pyret language. A simple double function is\n        defined using the \"fun\" keyword, but then two test cases are defined after\n        the \"where\" keyword. When the program is run, the test cases are evaluated\n        and an exception is thrown if the result does not match the expected output.`\n      ]\n    },\n    {\n      key: '15',\n      title: 'Public packages must be fully documented before they are published',\n      image: 'images/15-documentation.png',\n      rating: 'Neutral',\n      description: [\n        `In many languages it is a common convention to have special documentation\n        comments, such as the popular JavaDoc style, to provide structured\n        documentation for a function or package.`,\n        `Some package repositories require the presence of these special comments\n        in any exposed function or class to help developers and consumers of the\n        package.`\n      ]\n    },\n    {\n      key: '16',\n      title: 'The language has an online editor or playground',\n      image: 'images/16-online-editor.png',\n      rating: 'Neutral',\n      description: [\n        `An online editor or playground allows developers to experiment with the\n        language without downloading anything or setting up any tooling.`,\n        `It can also serve as a convinient scratchpad to quickly test ideas without\n        the bloat of a full editor or ide.`\n      ]\n    },\n    {\n      key: '17',\n      title: `There is an official formatter that formats source code to conform\n      with a fixed style guide`,\n      image: '',\n      rating: 'Neutral',\n      description: [\n        `It is not uncommon for there to be differing opinions among developers\n        around how source code should be written and formatted. So-called linters\n        exist to enforce a specific code style within a team or community.`,\n        `Recently, languages have started provided official linters so that the\n        entire community conforms to a single style guide. This can be seen in\n        languages such as Go, Rust, and Elm.`\n      ]\n    },\n    {\n      key: '18',\n      title: 'Programs can be constructed in a visual patcher environment',\n      image: 'images/18-visual-patcher.png',\n      rating: 'Neutral',\n      description: [\n        `Some languages are visual rather than textual. Individual objects or\n        functions are connected together with wires in a visual \"patcher\" environment\n        that displays the flow of data in the program.`\n      ]\n    },\n    {\n      key: '19',\n      title: `There is an explorer for common and/or useful snippets of code,\n      objects, or functions`,\n      image: 'images/19-explorer.jpg',\n      rating: 'Neutral',\n      description: [\n        // `It is common for similar code snippets and patterns to be repeated\n        // throughout a codebase, or across many codebases. A code snippet explorer\n        // can help managage the smaller pieces of code, particularly in cases\n        // where they tackle a specific or niche problem but the developer does not\n        // want to create or find a package to import.`,\n        // `For programming languages that also provide their own editor or environment,\n        // such a code snippet explorer might be included. It may also be possible\n        // to share snippets with the community and search for others.`\n      ]\n    },\n    {\n      key: '20',\n      title: 'Functions and packages can be searched for based on their type signature',\n      image: 'images/20-type-search.png',\n      rating: 'Neutral',\n      description: [\n        // `When a language has static typing, it opens up the possibility for a\n        // codebase or package to be searched for based not just on names but on\n        // type signatures as well.`,\n        // `Hoogle is one such example of this functionality. This can prove particularly\n        // useful when developers know the result they want to achieve but not the\n        // name of the function or want to explore different implementations with\n        // the same type signature.`\n      ]\n    },\n    {\n      key: '21',\n      title: `There is an official linter that detects common problems and anti-patterns\n      such as unused imports or duplicate variable names`,\n      image: 'images/21-linter.png',\n      rating: 'Neutral',\n      description: [\n        // `A linter is a tool that detects bad practices, ineffecient code, or\n        // common anti-patterns, and suggests how to fix those issues. These tools\n        // are often maintained by the community and are configurable to taste.`,\n        // `Some languages, however, include an official linter as part of the\n        // language distribution such as with Go. The benefit of such a linter is\n        // that they are often not user-configurable, ensuring the entire community\n        // is often adhering to the same standards and practices.`\n      ]\n    },\n    {\n      key: '22',\n      title: 'User interfaces can be built using a drag-and-drop editor',\n      image: 'images/22-gui-editor.png',\n      rating: 'Neutral',\n      description: [\n        // `Some may find developing more complex user interfaces through plain\n        // code cumbersome or difficult to manage. As an alternative, a number of\n        // graphical editors exist to allow interface elements to be arranged on\n        // a canvas and have the necessary code generated afterwards.`\n      ]\n    },\n    {\n      key: '23',\n      title: 'All values are immutable and cannot be modified',\n      image: '',\n      rating: 'Neutral',\n      description: [\n        // `In languages such as Haskell or Elm, values cannot be changed after being\n        // defined. This means a suite of bugs related to mutating variables are no\n        // longer a problem, but also means that new variables must be created whenever\n        // we need to change something.`\n      ]\n    },\n    {\n      key: '24',\n      title: 'Functions are pure and do not perform side effects',\n      image: 'images/24-pure-functions.png',\n      rating: 'Neutral',\n      description: [\n        // `Pure functions exhibit two key properties. The first is known as referential\n        // transparency. This means that given the same input, the output is always\n        // the same. The second is a guarantee that the function has no side effects\n        // such as mutating variables or file I/O.`,\n        // `The code snippet contrasts a pure function to an impure one. The double\n        // function behaves predictably and consistenly, but the addRandom function\n        // does not. It mutates a global y variable, and uses Math.random meaning\n        // the return value can change even when the arguments stay the same.`\n      ]\n    },\n    {\n      key: '25',\n      title: `Functions are first-class values and can be stored in variables\n      and passed as arguments to other functions`,\n      image: 'images/25-first-class-functions.png',\n      rating: 'Neutral',\n      description: [\n        // `First-class functions means that functions are not treated as a special\n        // language construct or data type. They can be passed to other functions\n        // or stored in variables, arrays, etc.`,\n        // `The code snippet shows a function being used as an argument to the\n        // Array.map method. Array.map will then call that function on every element\n        // in the array to transform it.`\n      ]\n    },\n    {\n      key: '26',\n      title: 'Variable names cannot be shadowed',\n      image: 'images/26-shadowing.png',\n      rating: 'Neutral',\n      description: [\n        // `Shadowing refers to the practice of creating a new variable with the\n        // same name as another variable in the outer scope. This can be convinient\n        // when shadowing generic variable names such as \"x\" in the code snippet, but\n        // can also make code more difficult to read as developers must have to\n        // remember which \"x\" is available in the current scope.`\n      ]\n    },\n    {\n      key: '27',\n      title: 'The language supports objects with local properties and methods',\n      image: 'images/27-objects.png',\n      rating: 'Neutral',\n      description: [\n        // `In object-oriented programming, a particular domain is modelled around\n        // objects which contain some local state and some methods to manipulate\n        // that state. This is principally a way of controlling encapsulation: certain\n        // properties or state can be hidden and made accessible or modifiable via\n        // an object's methods.`\n      ]\n    },\n    {\n      key: '28',\n      title: `The language enforces a specific type of application structure or\n      architecture`,\n      image: '',\n      rating: 'Neutral',\n      description: [\n        // `There are many different ways to architecture and structure an applications.\n        // Some languages take a more opinionated approach and impose a particular\n        // architecture, or the language design makes a particular structure easier\n        // to adopt.`,\n        // `The code snippet shows a simple Csound program. All programs must have a\n        // <CsInstruments> tag and a <CsScore> tag, even if they are left empty.`,\n        // `This can be a benefit to a community as it becomes easier to read other\n        // people's code, but can also pose unhelpful restrictions when a developer\n        // wants to do something discouraged or outright impossible.`\n      ]\n    },\n    {\n      key: '29',\n      title: `A program can be edited while it is running and changes are reflected\n      in real-time`,\n      image: '',\n      rating: 'Neutral',\n      description: [\n        // `Known as hot reloading, or hot module replacemenet, this technology allows\n        // a program to be edited while it is running without restarting the entire\n        // application.`,\n        // `This is particularly prevalent in web development, where it is often\n        // desireable to persist application state while changing UI or design\n        // elements.`\n      ]\n    },\n    {\n      key: '30',\n      title: `There is a foreign function interface (FFI) to call functions written\n      in different languages`,\n      image: '',\n      rating: 'Neutral',\n      description: [\n        ''\n      ]\n    },\n    {\n      key: '31',\n      title: `Functions can be partially applied by supplying on some of it's\n      arguments`,\n      image: '',\n      rating: 'Neutral',\n      description: []\n    },\n    {\n      key: '32',\n      title: 'The language has a different syntax for different parts of a program',\n      image: 'images/32-different-syntax.png',\n      rating: 'Neutral',\n      description: []\n    },\n    {\n      key: '33',\n      title: `Compiler errors have a specific error code associated with them that\n      can be used to find out more information about a particular error`,\n      image: 'images/33-error-codes.png',\n      rating: 'Neutral',\n      description: []\n    },\n    {\n      key: '34',\n      title: 'The compiler provides suggestions on how to fix a compiler error',\n      image: 'images/34-compiler-suggestions.png',\n      rating: 'Neutral',\n      description: []\n    },\n    {\n      key: '35',\n      title: `Compiler errors link directly to the portion of source code that\n      caused the error`,\n      image: '',\n      rating: 'Neutral',\n      description: []\n    },\n    {\n      key: '36',\n      title: `Code can be compiled in a debug mode that allows events to be\n      rewound and stepped through in time`,\n      image: '',\n      rating: 'Neutral',\n      description: []\n    }\n  ]\n}\n\nElm.Main.init({\n  flags: { demographics, likert, qsort }\n})\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}